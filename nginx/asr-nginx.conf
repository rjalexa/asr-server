# ASR Server Nginx Configuration
# This configuration provides API key protection and rate limiting for the ASR service

# Rate limiting zones
# 30 requests per minute = 1 request every 2 seconds
limit_req_zone $http_x_api_key zone=asr_api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=general:10m rate=60r/m;

# Upstream definitions
upstream asr_backend {
    server localhost:9001;
    keepalive 32;
}

upstream nextjs_frontend {
    server localhost:3000;
    keepalive 32;
}

# API key validation map
map $http_x_api_key $api_key_valid {
    default 0;
    # Add your API keys here - replace with actual keys from .secrets file
    "asr_prod_abc123def456ghi789" 1;
    "asr_dev_xyz789uvw012rst345" 1;
    "asr_test_mno456pqr789stu012" 1;
}

server {
    listen 80;
    server_name your-domain.com;  # Replace with your actual domain
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Direct ASR API access with API key protection
    location /asr/ {
        # API key validation
        if ($http_x_api_key = "") {
            return 401 '{"error": "Missing X-API-Key header", "message": "Please provide a valid API key in the X-API-Key header"}';
        }
        
        if ($api_key_valid = 0) {
            return 401 '{"error": "Invalid API key", "message": "The provided API key is not valid"}';
        }
        
        # Rate limiting - 30 requests per minute with burst of 5
        limit_req zone=asr_api burst=5 nodelay;
        limit_req_status 429;
        
        # CORS headers for API access
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "X-API-Key, Content-Type, Accept" always;
        add_header Access-Control-Max-Age 86400 always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Only allow POST requests
        if ($request_method !~ ^(POST)$) {
            return 405 '{"error": "Method not allowed", "message": "Only POST requests are supported"}';
        }
        
        # Proxy to ASR backend
        proxy_pass http://asr_backend/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts for large audio file processing
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # File upload size limit (50MB)
        client_max_body_size 50M;
        client_body_timeout 60s;
        
        # Buffer settings for large files
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    # Next.js API routes (including /api/transcribe-direct)
    location /api/ {
        # General rate limiting for API routes
        limit_req zone=general burst=20 nodelay;
        
        # Proxy to Next.js frontend
        proxy_pass http://nextjs_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # File upload size limit
        client_max_body_size 50M;
    }
    
    # Next.js frontend (static files and pages)
    location / {
        # General rate limiting
        limit_req zone=general burst=50 nodelay;
        
        # Proxy to Next.js frontend
        proxy_pass http://nextjs_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status": "healthy", "timestamp": "$time_iso8601"}';
        add_header Content-Type application/json;
    }
    
    # Block common attack patterns
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS configuration (recommended for production)
server {
    listen 443 ssl http2;
    server_name your-domain.com;  # Replace with your actual domain
    
    # SSL certificate configuration
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers for HTTPS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Include all the same location blocks as the HTTP server
    # (Copy all location blocks from the HTTP server above)
    
    # Redirect HTTP to HTTPS
    error_page 497 https://$server_name$request_uri;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name your-domain.com;  # Replace with your actual domain
    return 301 https://$server_name$request_uri;
}
